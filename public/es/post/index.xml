<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Sitio en español</title>
    <link>/es/post/</link>
      <atom:link href="/es/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>es</language><copyright>© Maria Dermit, {2020}</copyright><lastBuildDate>Sat, 06 Feb 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu89765a528fbe3e89fbea23b995128687_292554_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>/es/post/</link>
    </image>
    
    <item>
      <title>Step-by-step actions in Tidyeval</title>
      <link>/es/2021-02-06-tidyeval-actions/</link>
      <pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/es/2021-02-06-tidyeval-actions/</guid>
      <description>
&lt;script src=&#34;../../es/2021-02-06-tidyeval-actions/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#standard-function-for-coefficient-of-variation&#34;&gt;Standard function for coefficient of variation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modiying-the-enviroment---no-issues&#34;&gt;Modiying the enviroment - no issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modiying-the-enviroment---issues&#34;&gt;Modiying the enviroment - ISSUES!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#capturing-with-enquo&#34;&gt;Capturing with enquo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#changing-name-with&#34;&gt;Changing name with :=&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#insert-a-list-of-expressions-into-a-call&#34;&gt;Insert a list of expressions into a call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusions&#34;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rlang)
library(tidyverse)
library(testthat)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;motivation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Motivation&lt;/h1&gt;
&lt;p&gt;Provide some examples of using &lt;a href=&#34;https://tidyeval.tidyverse.org/&#34;&gt;Tidy evaluation (or NSE)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;ℹ️ You may find this useful if you have read &lt;a href=&#34;https://adv-r.hadley.nz/metaprogramming.html&#34;&gt;Chapters 17-20 of Advanced R book&lt;/a&gt; and you are looking to find more additional examples to the great resource put together by &lt;a href=&#34;https://maraaverick.rbind.io/2017/08/tidyeval-resource-roundup/&#34;&gt;Mara&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;standard-function-for-coefficient-of-variation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Standard function for coefficient of variation&lt;/h1&gt;
&lt;p&gt;Let’s write a function for coefficient of variation:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cv &amp;lt;- function(var) {
    sd(var) / mean(var)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can test that the function is behaving correctly&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;testthat::expect_equal( cv(c(3,3)), 0)
testthat::expect_equal( round(cv(c(3,6)),2), 0.47)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! The function seems to be doing what we want!
&lt;img src=&#34;https://media.giphy.com/media/12FwhN6Qh3cfxm/giphy.gif&#34; alt=&#34;Baby steps&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;capture-and-uncapture-expression&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Capture and uncapture expression&lt;/h2&gt;
&lt;p&gt;We can capture and uncapture expressions with &lt;a href=&#34;https://adv-r.hadley.nz/quasiquotation.html&#34;&gt;&lt;code&gt;enexpr&lt;/code&gt; and bang-bang !!&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cv &amp;lt;- function(var) {
    var &amp;lt;- enexpr(var) # this captures what the caller supplied to the function
    expr(sd(!!var) / mean(!!var)) ##!! is gonna unquote it. Then expr is gonna capture that.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s see what happens:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;testthat::expect_equal( eval(cv(c(3,3))), 0)
testthat::expect_type((cv(c(3,3))), &amp;quot;language&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we evaluate the function, the cv is equal to 0. If we don’t evaluate the function it remains as a &lt;a href=&#34;https://adv-r.hadley.nz/expressions.html#calls&#34;&gt;call object&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/ChzfTLSi47FYc/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;modiying-the-enviroment---no-issues&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Modiying the enviroment - no issues&lt;/h1&gt;
&lt;p&gt;Let’s modify the function envoriment:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cv &amp;lt;- function(var) {
    x=6
    var &amp;lt;- enexpr(var)
    expr(sd(!!var) / mean(!!var))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s see what happens:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x=3
testthat::expect_equal( eval(cv(c(3,x))), 0)
x=6
testthat::expect_equal(round(eval(cv(c(3,x))),2), 0.47)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works even if we put x in the environment where the function is written because x is not an argument of cv function.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;modiying-the-enviroment---issues&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Modiying the enviroment - ISSUES!&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adding_cv &amp;lt;- function(df,var) {
    x=c(3,6)
    var &amp;lt;- enexpr(var)
    mutate(df, sd(!!var) / mean(!!var))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s see what happens:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df&amp;lt;- tibble(n=3)
x=c(3,3)
adding_cv(df,x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##       n `sd(x)/mean(x)`
##   &amp;lt;dbl&amp;gt;           &amp;lt;dbl&amp;gt;
## 1     3           0.471&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wait, what?! New columns with CV should be 0. However adding_cv is using &lt;code&gt;x&lt;/code&gt; included in the function enviroment.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/d9rGLfxrh1Rfy/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;capturing-with-enquo&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Capturing with enquo&lt;/h1&gt;
&lt;p&gt;To capture the function and the environment we need &lt;a href=&#34;https://adv-r.hadley.nz/evaluation.html?q=enquo#creating&#34;&gt;enquo&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adding_cv &amp;lt;- function(df,var) {
    x=c(3,6)
    var &amp;lt;- enquo(var)
    mutate(df, sd(!!var) / mean(!!var))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s see what happens now:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df&amp;lt;- tibble(n=3)
x=c(3,3)
adding_cv(df,x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##       n `sd(x)/mean(x)`
##   &amp;lt;dbl&amp;gt;           &amp;lt;dbl&amp;gt;
## 1     3               0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/jsm9GubElH2X04lRNn/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;changing-name-with&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Changing name with :=&lt;/h1&gt;
&lt;p&gt;We can make the name of the new column prettier with &lt;a href=&#34;https://adv-r.hadley.nz/quasiquotation.html#tidy-dots&#34;&gt;&lt;strong&gt;:=&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adding_cv &amp;lt;- function(df,var,nm) {
    x=c(3,3)
    nm_name &amp;lt;- quo_name(nm)
    var &amp;lt;- enquo(var)
    mutate(df, !!nm_name:= sd(!!var) / mean(!!var))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s see if that allows changing the name:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x=c(3,6)
df&amp;lt;- tibble(n=3)
adding_cv(df,x,&amp;quot;pretty_name&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##       n pretty_name
##   &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
## 1     3       0.471&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/Zb63DjukhzkT1d0VoZ/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;insert-a-list-of-expressions-into-a-call&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Insert a list of expressions into a call&lt;/h1&gt;
&lt;p&gt;What if we want to allow say filtering indirectly? We need to unquote multiple arguments. For this we can use &lt;a href=&#34;https://adv-r.hadley.nz/quasiquotation.html#unquoting-many-arguments&#34;&gt;!!!&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adding_cv &amp;lt;- function(df,var,nm, ...) {
    x=c(3,6)
    nm_name &amp;lt;- quo_name(nm)
    var &amp;lt;- enquo(var)
    filtering &amp;lt;- quos(...)
    df %&amp;gt;%  filter(!!!filtering) %&amp;gt;% 
    mutate( !!nm_name:= sd(!!var) / mean(!!var))}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s see if we can filter rows 3 and 6 from column n of our df.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df&amp;lt;- tibble(n=c(3,6,9),m=c(3,6,9))
x=c(3,3)
adding_cv(df,x,&amp;quot;pretty_name&amp;quot;, n %in% c(3,6))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##       n     m pretty_name
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
## 1     3     3           0
## 2     6     6           0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/xTiTnCf8IJvjldRaxi/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;These were just few examples to illustrate why &lt;a href=&#34;%5Bhttps://tidyeval.tidyverse.org/&#34;&gt;tidyeval&lt;/a&gt; can be useful and when it might be needed. I hope it helped you!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Clasificación PCA y UMAP de aceites vegetales con tidymodels &amp; base R</title>
      <link>/es/2021-02-04-prendizaje-no-supervisado-con-tidymodels/</link>
      <pubDate>Thu, 04 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/es/2021-02-04-prendizaje-no-supervisado-con-tidymodels/</guid>
      <description>
&lt;script src=&#34;../../es/2021-02-04-prendizaje-no-supervisado-con-tidymodels/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#motivación-y-datos&#34;&gt;Motivación y datos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pca-in-base-r&#34;&gt;PCA in base R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pca-con-tidymodels&#34;&gt;PCA con Tidymodels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#umap-con-tidymodels&#34;&gt;UMAP con Tidymodels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusiones&#34;&gt;Conclusiones&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidymodels)
library(modeldata)
library(ggfortify)
library(tidyverse)
library(embed)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;motivación-y-datos&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Motivación y datos&lt;/h1&gt;
&lt;p&gt;Mientras exploraba el 📦
&lt;a href=&#34;https://github.com/tidymodels/modeldata&#34;&gt;modeldata&lt;/a&gt; encontré el conjunto de datos &lt;code&gt;aceites&lt;/code&gt; (&lt;code&gt;oils&lt;/code&gt;), que tiene información de cromatografía de gases utilizada para determinar la composición de ácidos grasos de 96 muestras correspondientes a 7 aceites vegetales diferentes del mercado. Estos datos fueron &lt;a href=&#34;https://www.sciencedirect.com/science/article/abs/pii/S0169743904001200&#34;&gt;publicados&lt;/a&gt; por un laboratorio de química. Estos datos son muy parecidos a lo que obtenemos en un laboratorio de proteómica, y lo primero que tendemos a hacer para explorar estos datos complejos es hacer un PCA para tener una idea simplificada de su distribución en el espacio.&lt;/p&gt;
&lt;div id=&#34;exploracion-de-datos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exploracion de datos&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(oils)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(oils)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## tibble [96 × 8] (S3: tbl_df/tbl/data.frame)
##  $ palmitic  : num [1:96] 9.7 11.1 11.5 10 12.2 9.8 10.5 10.5 11.5 10 ...
##  $ stearic   : num [1:96] 5.2 5 5.2 4.8 5 4.2 5 5 5.2 4.8 ...
##  $ oleic     : num [1:96] 31 32.9 35 30.4 31.1 43 31.8 31.8 35 30.4 ...
##  $ linoleic  : num [1:96] 52.7 49.8 47.2 53.5 50.5 39.2 51.3 51.3 47.2 53.5 ...
##  $ linolenic : num [1:96] 0.4 0.3 0.2 0.3 0.3 2.4 0.4 0.4 0.2 0.3 ...
##  $ eicosanoic: num [1:96] 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 ...
##  $ eicosenoic: num [1:96] 0.1 0.1 0.1 0.1 0.1 0.5 0.1 0.1 0.1 0.1 ...
##  $ class     : Factor w/ 7 levels &amp;quot;corn&amp;quot;,&amp;quot;olive&amp;quot;,..: 4 4 4 4 4 4 4 4 4 4 ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;oils %&amp;gt;%
  count(class)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 2
##   class         n
## * &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;
## 1 corn          2
## 2 olive         7
## 3 peanut        3
## 4 pumpkin      37
## 5 rapeseed     10
## 6 soybean      11
## 7 sunflower    26&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;¡Esto parece un conjunto de datos divertido para proyectar en un espacio de dimensión reducida como PCA o UMAP!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;pca-in-base-r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;PCA in base R&lt;/h1&gt;
&lt;p&gt;Los pasos para generar los componentes para PCA en base R serían:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pca_res &amp;lt;- oils %&amp;gt;%
  dplyr::select(where(is.numeric)) %&amp;gt;% # select only the numeric variables
  tidyr::drop_na() %&amp;gt;% # to drop any NA
  scale() %&amp;gt;% # to initially normalise the variances
  prcomp() # to convert numeric data to principal components&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pca_res&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Standard deviations (1, .., p=7):
## [1] 1.78631393 1.21432295 1.11849881 0.80775705 0.49010697 0.43543634 0.03437479
## 
## Rotation (n x k) = (7 x 7):
##                   PC1         PC2         PC3         PC4         PC5
## palmitic   -0.1724393 -0.69299469 -0.04593832  0.46972220 -0.19508286
## stearic    -0.4589668 -0.25101419 -0.24289349  0.18544207  0.61204669
## oleic       0.4578722 -0.39918199  0.14986398 -0.28962122  0.08386290
## linoleic   -0.4590266  0.44858975 -0.11564307  0.05114339 -0.07111895
## linolenic   0.3446082  0.27607934  0.23426894  0.80580939 -0.02884460
## eicosanoic  0.1682596 -0.01595516 -0.81991595  0.04591653 -0.46100031
## eicosenoic  0.4384013  0.14034544 -0.41942317  0.08389933  0.60157904
##                   PC6        PC7
## palmitic   -0.4661816 0.10904667
## stearic     0.5067647 0.03928963
## oleic       0.2409267 0.67792957
## linoleic   -0.2371904 0.71467174
## linolenic   0.2916300 0.12220735
## eicosanoic  0.2889776 0.03216008
## eicosenoic -0.4929535 0.01587562&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos ver que los componentes principales (PC de principal components) para cada clase de aceite se agregaron en un objeto &lt;code&gt;prcomp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Y podríamos trazar esos componentes con “autoplot”&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;autoplot(pca_res, data = oils, colour = &amp;quot;class&amp;quot;) +
  labs(color = NULL) + theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../es/2021-02-04-prendizaje-no-supervisado-con-tidymodels/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;
Podemos ver que este PCA separa mucho el aceite de oliva de los otros 7 tipos de aceites. También parece que uno de los aceites de oliva está más cerca del tipo de aceite de maní en el espacio PCA.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pca-con-tidymodels&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;PCA con Tidymodels&lt;/h1&gt;
&lt;p&gt;Modelar es muy parecido a cocinar, y en el universo de Tidymodels el lenguaje refleja muy bien esto 👩‍🍳. Hay tres cosas que tendremos que hacer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escribir una receta 👨‍🍳&lt;/li&gt;
&lt;li&gt;Preparar esa receta 🍝&lt;/li&gt;
&lt;li&gt;Sacarle jugo a la receta 🍺&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;escribir-una-receta&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Escribir una receta&lt;/h2&gt;
&lt;p&gt;Escribimos la receta agregando una serie de pasos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pca_rec &amp;lt;- recipe(~., data = oils) %&amp;gt;% # empieza a escribir la receta con todos los datos
  update_role(class, new_role = &amp;quot;id&amp;quot;) %&amp;gt;% # para mantener esta columna pero no incluirla en el modelo
  step_normalize(all_predictors()) %&amp;gt;% # para mantener esta columna pero no incluirla en el modelo
  step_pca(all_predictors()) # para convertir datos numéricos en componentes principales&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como vemos los pasos que debemos seguir para escribir la receta son muy similares a los pasos seguidos en base R.&lt;/p&gt;
&lt;p&gt;Sin embargo, esto no es todo. De hecho, si exploramos cómo se ve la receta:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pca_rec&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Data Recipe
## 
## Inputs:
## 
##       role #variables
##         id          1
##  predictor          7
## 
## Operations:
## 
## Centering and scaling for all_predictors()
## No PCA components were extracted.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos ver que se creó la matriz de diseño con id y variables predictoras. La receta nos dice que los &lt;em&gt;No se extrajeron componentes de PCA&lt;/em&gt;. Esto se debe a que una receta especifica lo que queremos hacer, pero todavía no afecta a los datos. Necesitamos extraer esos componentes preparando la receta&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;preparar-esa-receta&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Preparar esa receta&lt;/h2&gt;
&lt;p&gt;Podemos usar la función &lt;code&gt;prep&lt;/code&gt; para prepararnos para entrenar esta receta de datos. Prep devuelve una receta actualizada con las estimaciones.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pca_prep &amp;lt;- prep(pca_rec)
pca_prep&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Data Recipe
## 
## Inputs:
## 
##       role #variables
##         id          1
##  predictor          7
## 
## Training data contained 96 data points and no missing data.
## 
## Operations:
## 
## Centering and scaling for palmitic, stearic, oleic, linoleic, ... [trained]
## PCA extraction with palmitic, stearic, oleic, linoleic, ... [trained]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En las operaciones vemos que los datos han sido [entrenados].&lt;/p&gt;
&lt;p&gt;¡Excelente! Pero estos todavía no son los componentes 🤔. ¡Necesitamos finalizar esa receta preparada &lt;strong&gt;haciéndola jugo&lt;/strong&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sacarle-jugo-a-la-receta&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sacarle jugo a la receta&lt;/h2&gt;
&lt;p&gt;Necesitamos aplicar esta operación a los datos; &lt;code&gt;juice&lt;/code&gt; devuelve un tibble en el que se han aplicado todos los pasos a los datos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pca_juiced &amp;lt;- juice(pca_prep)
pca_juiced&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 96 x 6
##    class      PC1    PC2     PC3      PC4      PC5
##    &amp;lt;fct&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 pumpkin -1.22  -0.296 -0.245  -0.158    0.0882 
##  2 pumpkin -1.10  -0.771 -0.198  -0.00964 -0.0901 
##  3 pumpkin -1.08  -1.06  -0.212   0.0154   0.00279
##  4 pumpkin -1.14  -0.266 -0.192  -0.177   -0.137  
##  5 pumpkin -1.25  -0.995 -0.241   0.226   -0.186  
##  6 pumpkin  0.572 -0.500 -0.0821  0.0652   0.286  
##  7 pumpkin -1.13  -0.530 -0.202  -0.0640  -0.0592 
##  8 pumpkin -1.13  -0.530 -0.202  -0.0640  -0.0592 
##  9 pumpkin -1.08  -1.06  -0.212   0.0154   0.00279
## 10 pumpkin -1.14  -0.266 -0.192  -0.177   -0.137  
## # … with 86 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;¡Excelente! ¡Los datos procesados están listos para ser “consumidos” por un gráfico!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pca_juiced %&amp;gt;%
  ggplot(aes(PC1, PC2, label = class)) +
  geom_point(aes(color = class), alpha = 0.7, size = 2) +
  labs(color = NULL) +theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../es/2021-02-04-prendizaje-no-supervisado-con-tidymodels/index_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;El PCA inicial y este generado con Tidymodels se ven muy similares. Ten en cuenta que la gráfica automática agrega información a la gráfica, como proporcionar el porcentaje de PC. Entonces, ¿cuál es el punto de usar Tidymodels si es una serie de pasos tan larga en comparación con la base R? &lt;a href=&#34;https://www.tidymodels.org/&#34;&gt;Tidymodels&lt;/a&gt; integra muchos paquetes modulares que facilitan la creación y evaluación de diferentes modelos.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;umap-con-tidymodels&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;UMAP con Tidymodels&lt;/h1&gt;
&lt;p&gt;Además de PCA, podríamos trazar una &lt;a href=&#34;https://umap-learn.readthedocs.io/en/latest/&#34;&gt;representación UMAP&lt;/a&gt;. Para hacer eso, necesitaríamos una nueva receta, una que incluya un paso para especificar la técnica de reducción de dimensión UMAP; este paso se llama naturalmente &lt;code&gt;step_umap&lt;/code&gt;. Una vez que tenemos esta receta, el proceso es el mismo. Receta, preparación, jugo.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;umap_rec &amp;lt;- recipe(~., data = oils) %&amp;gt;%
  update_role(class, new_role = &amp;quot;id&amp;quot;) %&amp;gt;%
  step_normalize(all_predictors()) %&amp;gt;%
  step_umap(all_predictors()) # este paso hace que la receta sea diferente&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;umap_prep &amp;lt;- prep(umap_rec)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;umap_juiced &amp;lt;- juice(umap_prep)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;umap_juiced %&amp;gt;%
  ggplot(aes(umap_1, umap_2, label = class)) +
  geom_point(aes(color = class), alpha = 0.7, size = 2) +
  labs(color = NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;featured2.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Este modelo separa los datos en el espacio de forma algo diferente a la PCA. PCA y UMAP son fundamentalmente diferentes en que PCA es un algoritmo de reducción de dimensionalidad lineal, mientras que UMAP no es lineal. Además, hay algunos parámetros importantes que pueden afectar el aspecto de la representación UMAP. Esto se explica muy bien en el archivo README del paquete umapr de &lt;a href=&#34;https://github.com/ropenscilabs/umapr&#34;&gt;ropenscilabs&lt;/a&gt;. Puedes ver argumentos adicionales ofrecidos por &lt;code&gt;step_umap&lt;/code&gt; con &lt;code&gt;?step_umap&lt;/code&gt;. También hay que tener en cuenta que hemos entrenado nuestros modelos con un pequeño conjunto de datos (no hemos realizado un remuestreo) y no hemos evaluado su rendimiento.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusiones&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusiones&lt;/h1&gt;
&lt;p&gt;El procesamiento de datos para realizar aprendizaje automático sin supervisión con Tidymodels es muy similar al de base R. Los algoritmos de reducción de dimensionalidad lineal y no lineal separan los datos en el espacio reducido de manera diferente.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
