<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>metaprogramming | Sitio en español</title>
    <link>/es/tags/metaprogramming/</link>
      <atom:link href="/es/tags/metaprogramming/index.xml" rel="self" type="application/rss+xml" />
    <description>metaprogramming</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>es</language><copyright>© Maria Dermit, {2020}</copyright><lastBuildDate>Thu, 11 Feb 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu89765a528fbe3e89fbea23b995128687_292554_512x512_fill_lanczos_center_2.png</url>
      <title>metaprogramming</title>
      <link>/es/tags/metaprogramming/</link>
    </image>
    
    <item>
      <title>Paso a paso en TidyEval</title>
      <link>/es/2021-02-11-actiones-tidyeval/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/es/2021-02-11-actiones-tidyeval/</guid>
      <description>
&lt;script src=&#34;../../../es/2021-02-11-actiones-tidyeval/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#motivación&#34;&gt;Motivación&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vamos-a-crear-una-función-para-calcular-el-coeficiente-de-variación&#34;&gt;Vamos a crear una función para calcular el coeficiente de variación&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modificando-el-medio-ambiente-sin-problemas&#34;&gt;Modificando el medio ambiente, sin problemas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modificando-el-ambiente---problemas&#34;&gt;Modificando el ambiente - PROBLEMAS!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#capturando-con-enquo&#34;&gt;Capturando con enquo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cambiando-el-nombre-con-with&#34;&gt;Cambiando el nombre con with :=&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#insertando-una-lista-de-expresiones-en-una-llamada&#34;&gt;Insertando una lista de expresiones en una llamada&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusiones&#34;&gt;Conclusiones&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;motivación&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Motivación&lt;/h1&gt;
&lt;p&gt;Provide some examples of using &lt;a href=&#34;https://tidyeval.tidyverse.org/&#34;&gt;Tidy evaluation (also called non-standard evaluation (NSE) or &lt;strong&gt;delayed evaluation&lt;/strong&gt;)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;ℹ️ Este post te puede resultar beneficioso si has leído los &lt;a href=&#34;https://adv-r.hadley.nz/metaprogramming.html&#34;&gt;capítulos 17-20 del libro de Advanced R&lt;/a&gt; y estás buscando encontrar más ejemplos adicionales y en español al gran recurso de &lt;a href=&#34;https://maraaverick.rbind.io/2017/08/tidyeval-resource-roundup/&#34;&gt;Mara&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Librerias que necesitaremos para este post:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rlang)
library(tidyverse)
library(testthat)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;vamos-a-crear-una-función-para-calcular-el-coeficiente-de-variación&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Vamos a crear una función para calcular el coeficiente de variación&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cv &amp;lt;- function(var) {
    sd(var) / mean(var)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos probar que la función se está comportando correctamente:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;testthat::expect_equal( cv(c(3,3)), 0)
testthat::expect_equal( round(cv(c(3,6)),2), 0.47)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;¡Excelente! ¡La función parece estar haciendo lo que queremos!
&lt;img src=&#34;https://media.giphy.com/media/12FwhN6Qh3cfxm/giphy.gif&#34; alt=&#34;Pasos de bebé&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;capturar-y-descubrir-expresión&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Capturar y descubrir expresión&lt;/h2&gt;
&lt;p&gt;Podemos capturar y hacer expresiones (entrecomillar) de lo que el usuario ha pasado como argumento con &lt;a href=&#34;https://adv-r.hadley.nz/quasiquotation.html&#34;&gt;&lt;code&gt;enexpr&lt;/code&gt;&lt;/a&gt;. Podemos quitar los entrecomillados con &lt;a href=&#34;https://adv-r.hadley.nz/quasiquotation.html&#34;&gt;&lt;code&gt;bang-bang !!&lt;/code&gt;&lt;/a&gt;. Si le pasamos el resultado de esto a &lt;em&gt;expr&lt;/em&gt; lo seguimos manteniendo como una expresión. Seguimos estando en evaluación retrasada, nada se ha evaluado todavia.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cv &amp;lt;- function(var) {
    var &amp;lt;- enexpr(var) 
    expr(sd(!!var) / mean(!!var)) 
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veamos qué pasa:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;testthat::expect_equal(eval(cv(c(3,3))), 0) 
testthat::expect_type((cv(c(3,3))), &amp;quot;language&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si evaluamos la función, el cv es igual a 0. Tenga en cuenta que &lt;strong&gt;hemos retrasado la evaluación&lt;/strong&gt; hasta el punto cuando usamos &lt;em&gt;eval&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Si no evaluamos la función, permanece como un &lt;a href=&#34;https://adv-r.hadley.nz/expressions.html#calls&#34;&gt;objeto de llamada o call object&lt;/a&gt;.
&lt;img src=&#34;https://media.giphy.com/media/ChzfTLSi47FYc/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;modificando-el-medio-ambiente-sin-problemas&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Modificando el medio ambiente, sin problemas&lt;/h1&gt;
&lt;p&gt;Modifiquemos un poco el &lt;code&gt;enviroment&lt;/code&gt; o entorno de la función:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cv &amp;lt;- function(var) {
    x=6
    var &amp;lt;- enexpr(var)
    expr(sd(!!var) / mean(!!var))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veamos qué pasa:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x=3
testthat::expect_equal( eval(cv(c(3,x))), 0)
x=6
testthat::expect_equal(round(eval(cv(c(3,x))),2), 0.47)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto funciona incluso si ponemos x en el entorno donde se escribe la función porque x no es un argumento de la función cv.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;modificando-el-ambiente---problemas&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Modificando el ambiente - PROBLEMAS!&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adding_cv &amp;lt;- function(df,var) {
    x=c(3,6)
    var &amp;lt;- enexpr(var)
    mutate(df, sd(!!var) / mean(!!var))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veamos que pasa:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df&amp;lt;- tibble(n=3)
x=c(3,3)
adding_cv(df,x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##       n `sd(x)/mean(x)`
##   &amp;lt;dbl&amp;gt;           &amp;lt;dbl&amp;gt;
## 1     3           0.471&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;¡¿Cómo?! La nueva columna contiene el coeficiente de variación. Si x = c (3,3), el valor en la nueva columna debería haber sido 0. Sin embargo, agregar_cv está usando x = c (3,6) incluido en el entorno de la función y no x = c (3,3).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/d9rGLfxrh1Rfy/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;capturando-con-enquo&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Capturando con enquo&lt;/h1&gt;
&lt;p&gt;Para capturar la función y el entorno, necesitamos &lt;a href=&#34;https://adv-r.hadley.nz/evaluation.html?q=enquo#creating&#34;&gt;enquo&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adding_cv &amp;lt;- function(df,var) {
    x=c(3,6)
    var &amp;lt;- enquo(var)
    mutate(df, sd(!!var) / mean(!!var))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veamos que pasa ahora:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df&amp;lt;- tibble(n=3)
x=c(3,3)
adding_cv(df,x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##       n `sd(x)/mean(x)`
##   &amp;lt;dbl&amp;gt;           &amp;lt;dbl&amp;gt;
## 1     3               0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/jsm9GubElH2X04lRNn/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cambiando-el-nombre-con-with&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Cambiando el nombre con with :=&lt;/h1&gt;
&lt;p&gt;Podemos hacer que el nombre de la nueva columna sea más bonito con &lt;a href=&#34;https://adv-r.hadley.nz/quasiquotation.html#tidy-dots&#34;&gt;&lt;strong&gt;: = &lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adding_cv &amp;lt;- function(df,var,nm) {
    x=c(3,3)
    nm_name &amp;lt;- quo_name(nm)
    var &amp;lt;- enquo(var)
    mutate(df, !!nm_name:= sd(!!var) / mean(!!var))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veamos si eso permite cambiar el nombre:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x=c(3,6)
df&amp;lt;- tibble(n=3)
adding_cv(df,x,&amp;quot;nombre_bonito&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##       n nombre_bonito
##   &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;
## 1     3         0.471&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/Zb63DjukhzkT1d0VoZ/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;insertando-una-lista-de-expresiones-en-una-llamada&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Insertando una lista de expresiones en una llamada&lt;/h1&gt;
&lt;p&gt;¿Qué pasa si queremos hacer un filtrado &lt;em&gt;detraído&lt;/em&gt;? Necesitamos quitar las comillas de varios argumentos. Para esto podemos usar &lt;a href=&#34;https://adv-r.hadley.nz/quasiquotation.html#unquoting-many-arguments&#34;&gt;!!!&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adding_cv &amp;lt;- function(df,var,nm, ...) {
    x=c(3,6)
    nm_name &amp;lt;- quo_name(nm)
    var &amp;lt;- enquo(var)
    filtering &amp;lt;- enquos(...)
    df %&amp;gt;%  filter(!!!filtering) %&amp;gt;% 
    mutate( !!nm_name:= sd(!!var) / mean(!!var))}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veamos si podemos filtrar las filas 3 y 6 de la columna de nuestro df.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df&amp;lt;- tibble(n=c(3,6,9),m=c(3,6,9))
x=c(3,3)
adding_cv(df,x,&amp;quot;pretty_name&amp;quot;, n %in% c(3,6))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##       n     m pretty_name
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
## 1     3     3           0
## 2     6     6           0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/xTiTnCf8IJvjldRaxi/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusiones&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusiones&lt;/h1&gt;
&lt;p&gt;Estos fueron solo algunos ejemplos para ilustrar por qué &lt;a href=&#34;https://tidyeval.tidyverse.org/&#34;&gt;tidyeval&lt;/a&gt; puede ser útil y cuándo podría ser necesario. ¡Espero que te haya ayudado!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
